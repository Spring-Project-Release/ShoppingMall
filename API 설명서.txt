*ItemController API

1. itemList()
: '/items' 경로
: get 요청
: 전체 상품 리스트와 status 200 반환, 상품이 아예 없으면 404 status 반환
: 404 status 반환 시 로그에 "상품이 존재하지 않습니다."라는 메시지 출력

2. itemCategory()
: '/items/category/{category}' 경로
: get 요청
: 해당 category의 상품들이 있으면 해당 상품 리스트와 status 200 반환, 없으면 404 status 반환
: 404 status 반환 시 로그에 "해당 카테고리를 가진 상품이 존재하지 않습니다."라는 메시지 출력

3. itemIsSoldout()
: '/items/isSoldout/{isSoldout}' 경로
: get 요청
: true나 false 중 하나가 {isSoldout} (또는 1이나 0) 값임, 각각 품절된 상품과 품절되지 않은 상품 리스트를 보여주며 해당 상품이 없으면 404 status 반환
: 404 status 반환 시 로그에 "해당 품절여부 조건을 만족하는 상품이 존재하지 않습니다."라는 메시지 출력

4. getItem()
: '/items/{itemId}' 경로
: get 요청
: 해당 itemId를 가지는 상품이 있으면 해당 상품과 status 200 반환, 없으면 404 status 반환
: 404 status 반환 시 로그에 "해당 itemId를 가진 상품이 존재하지 않습니다."라는 메시지 출력

5. getItemBySellerId()
: '/items/sellerId/{sellerId}' 경로
: get 요청
: 해당 sellerId를 가지는 상품이 있으면 해당 상품과 status 200 반환, 없으면 404 status 반환
: 404 status 반환 시 로그에 "해당 sellerId를 가진 상품이 존재하지 않습니다."라는 메시지 출력

6. getItemBySellerId()
: '/items/sellerName/{sellerName}' 경로
: get 요청
: 해당 sellerName을 가지는 상품이 있으면 해당 상품과 status 200 반환, 없으면 404 status 반환
: 404 status 반환 시 로그에 "해당 sellerName을 가진 상품이 존재하지 않습니다."라는 메시지 출력

7. newItem()
: '/items' 경로
: post 요청
: parameter로 Item을 받음
: parameter로 받은 Item을 DB에 저장, 저장이 되면 "Item created successfully." 메세지와 200 status 반환, 실패하여 예외가 발생하면 INTERNAL_SERVER_ERROR status와 "Failed to create Item." 메세지 반환
: IllegalStateException일때, 즉 parameter의 name이 기존의 DB에 있는 상품의 이름과 중복되었을 때 BAD_REQUEST status와 "이미 존재하는 상품 이름입니다. 이름을 변경해 주십시오." 메시지 반환
: IllegalArgumentException일때, 즉 sellerId가 없는 memberId를 이용해서 외래키 제약 조건 위반일 때 BAD_REQUEST status와 "해당하는 상품의 sellerId가 유저 DB에 존재하지 않습니다." 메시지 반환

8. update()
: '/items/{itemId}' 경로
: put 요청
: parameter로 Item을 받음(ItemId 있는 것 없는 것 상관 없음)
: parameter로 받은 Item의 내용으로 url의 itemId를 가지는 상품의 내용을 업데이트하는데, 업데이트에 성공하면 "Item updated successfully." 메시지와 200 status 반환, 실패하여 예외가 발생하면 INTERNAL_SERVER_ERROR status와 "존재하지 않는 itemId입니다." 메시지 반환

9. updateIsSoldout()
: '/items/{itemId}/isSoldout' 경로
: put 요청
: 해당 itemId를 가지는 상품의 품절상태를 반대로 바꿈, 바꾸는데에 성공하면 "Item isSoldout updated successfully." 메시지와 200 status 반환, 실패하면 INTERNAL_SERVER_ERROR status와 "존재하지 않는 itemId이거나 update 오류가 발생했습니다." 메시지 반환

10. deleteItem()
: '/items/{itemId} 경로
: delete 요청
: 해당 itemId를 가지는 상품을 DB에서 삭제, 삭제하는데에 성공하면 "Item deleted successfully." 메시지와 200 status 반환, 실패하면 404 status와 "존재하지 않는 itemId입니다." 메시지 반환

*CartController API

1. memberCartList()
: '/carts/user/{memberId} 경로
: get 요청
: 해당 memberId를 가지는 장바구니들이 있으면 장바구니 리스트와 status 200 반환, 아예 없으면 404 status 반환
: 404 status 반환 시 로그에 "해당 memberId를 가지는 장바구니가 존재하지 않습니다."라는 메시지 출력

2. memberCartItemList()
: '/carts/user/{memberId}/item/{itemId}' 경로
: get 요청
: 해당 memberId를 가지는 장바구니 중 해당 itemId를 가지는 장바구니와 status 200 반환(존재한다면 하나만 존재), 없으면 404 status 반환
: 404 status 반환 시 로그에 "해당 memberId와 itemId를 가지는 장바구니가 존재하지 않습니다."라는 메시지 출력

3. newCart() (변경 및 추가!!!)
: '/carts' 경로
: post 요청
: parameter로 Cart를 받음
: 로그인되어있는지 확인, 로그인이 되어있지 않다면 UNAUTHORIZED status와 "로그인 후 장바구니에 상품을 추가해주세요." 메시지 반환
: 로그인되어 있다면 parameter로 받은 Cart를 DB에 저장, 저장이 되면 "Cart created or amount updated successfully." 메세지와 200 status 반환, 실패하여 예외가 발생하면 INTERNAL_SERVER_ERROR status와 "Failed to create cart." 메세지 반환

: IllegalArgumentException일때, 즉 외래 키 제약 조건 위배- 존재하지 않는 itemId나 memberId를 가질 때 -할때 BAD_REQUEST status와 "Failed to create cart. 해당하는 itemId나 memberId가 존재하지 않습니다" 메시지 반환
: 본인이 판매중인 상품을 장바구니에 담을 때에도 BAD_REQUEST status와 IllegalArgumentException 발생, "본인이 판매중인 상품을 장바구니에 담을 수 없습니다."메시지 반환


4. deleteCart()
: '/carts/user/{memberId}' 경로
: delete 요청
: 해당 memberId를 가지는 장바구니들을 모두 DB에서 삭제, 삭제하는데에 성공하면 "User's cart deleted successfully." 메시지와 200 status 반환, 실패하면 404 status와 "해당하는 cart들이 존재하지 않습니다." 메시지 반환

5. deleteCartItem()
: 'carts/user/{memberId}/item/{itemId}' 경로
: delete 요청
: 해당 memberId와 itemId를 가지는 장바구니를 DB에서 삭제, 삭제하는데에 성공하면 "User's cartItem deleted successfully." 메시지와 200 status 반환, 실패하면 404 status와 "해당하는 cart가 존재하지 않습니다." 메시지 반환

6. increaseCartItemAmount()
: 'carts/{cartId}/amount' 경로
: put 요청
: 해당 cartId를 가지는 장바구니의 amount 정보를 업데이트, parameter로 amount 정보를 받을수도, 받지 않을수도 있음
: amount 정보를 받는다면 amount>0이어야 하며, parameter로 넘어온 amount 양만큼 장바구니의 amount를 증가시킴, 성공하면 "User's cartItem amount increased successfully." 메시지와 200 satus 반환
: amount 정보를 받지않아 null이라면 장바구니의 amount를 1만큼 감소시킴, 성공하면 "User's cartItem amount decreased successfully." 메시지와 200 status 반환
: amount의 조건이 위 두개가 모두 아니라면 badRequest status와 "Invalid request. Please provide a valid amount for cartItem." 메시지 반환
: 위 두 조건은 맞아떨어졌으나 amount 업데이트가 실패하면 INTERNAL_SERVER_ERROR status와 "The corresponding cart does not exist or an error occurred." 메시지 반환

7. payAllCart()
: 'carts/order/user/{memberId}' 경로
: post 요청
: 해당 유저의 모든 장바구니를 결제, parameter로 결제시의 memo를 받을수도, 받지 않을수도 있음
: 해당 유저의 각각의 장바구니 상품에 대해 orderService.save 함수를 호출하여 결제되는데 모두 제대로 결제되면 "장바구니 결제가 성공적으로 처리되었습니다." 메세지와 200 status 반환
: memberId 자체가 유저 DB에 존재하지 않는 경우, 즉 IllegalArgumentException일 때 BAD_REQUEST status와 "Invalid memberId: {memberId}" 메시지 반환
: memberId 자체가 유저 DB에는 존재하지만 cart DB에 존재하지 않을 경우, 즉 IllegalArgumentException일 때 BAD_REQUEST status와 "해당하는 memberId: {memberId}를 갖는 cart가 존재하지 않습니다." 메시지 반환

: illegalstateException일때는 각 상품을 결제할 때 호출하는orderService.save 함수에서 장바구니는 정상이지만 장바구니 결제를 할 때 특정 상품의 재고(stock)가 cart의 amount보다 부족한 경우로, 이 예외가 발생하면 BAD_REQUEST status와 "{itemId} 상품의 재고가 부족합니다." 메시지 반환
: 기타 다른 예외가 발생하면 INTERNAL_SERVER_ERROR status와 "장바구니 결제 처리 중 오류가 발생했습니다." 메시지 반환
: 선택한 memberId를 가지는 장바구니 중 하나라도 제대로 결제되지 않는 경우 롤백해서 모든 결제가 이루어지지 않음

8. paySomeCart()
: 'carts/order/some/user/{memberId}' 경로
: post 요청
: parameter로 결제하기 원하는 상품 Id들의 리스트를 필수적으로 받음, parameter로 결제시의 memo를 받을수도, 받지 않을수도 있음
: 해당 유저의 해당하는 장바구니 상품들에 대해 orderService.save 함수를 호출하여 결제되는데 모두 제대로 결제되면 "장바구니 결제가 성공적으로 처리되었습니다." 메세지와 200 status 반환

: memberId 자체가 유저 DB에 존재하지 않을 경우, 즉 IllegalArgumentException일 때 BAD_REQUEST status와 "Invalid memberId: {memberId}" 메시지 반환
: memberId는 유저 DB에 존재하지만 itemId 자체가 item DB에 존재하지 않는 경우, 즉 IllegalArgumentException일 때 BAD_REQUEST status와 "Invalid itemId: {itemId}" 메시지 반환
: 상품 Id 리스트의 Id들을 차례대로 처리하는데, 그 중 해당 itemId와 memberId 자체는 존재하지만 cart DB에 존재하지 않는 경우, 즉 IllegalArgumentException일 때 BAD_REQUEST status와 "해당하는 itemId: {itemId}와 memberId: {memberId}를 갖는 cart가 존재하지 않습니다." 메시지 반환

: Illegalstateexception일때는 각 상품을 결제할 때 호출하는orderService.save 함수에서 장바구니는 정상이지만 장바구니 결제를 할 때 특정 상품의 재고가 cart의 amount보다 부족한 경우로, 이 예외가 발생하면 BAD_REQUEST status와 "{itemId} 상품의 재고가 부족합니다." 메시지 반환
: 기타 다른 예외가 발생하면 INTERNAL_SERVER_ERROR status와 "장바구니 결제 처리 중 오류가 발생했습니다." 메시지 반환
: 선택한 상품 Id 리스트들과 memberId를 가지는 장바구니 중 하나라도 제대로 결제되지 않는 경우 롤백해서 모든 결제가 이루어지지 않음

*OrderController API

1. newOrder() (변경 및 추가!!!)
: '/orders' 경로
: post 요청
: parameter로 Order를 받음
: 먼저 로그인되어 있는지 확인, 로그인되어있지 않으면 UNAUTHORIZED status와 "로그인 후 주문해주세요." 메시지 반환
: 구매자 id(buyerId)와 로그인 유저 정보가 일치하지 않는다면 UNAUTHORIZED status와 "주문자와 로그인한 유저 정보가 일치하지 않는 오류가 발생했습니다. 로그아웃 후 다시 로그인해주십시오." 메시지 반환
: 그렇지 않다면 parameter로 받은 Order를 DB에 저장하고 status 200과 "주문이 성공적으로 처리되었습니다." 메시지 반환

: parameter로 받은 Order에 해당하는 memberId나 itemId 중 하나라도 없을 경우, IllegalArgumentException이 발생하며 각 경우에 따라 "결제 처리에 실패했습니다. 해당하는 memberId와 itemId가 존재하지 않습니다." 메시지, "결제 처리에 실패했습니다. 해당하는 memberId가 존재하지 않습니다." 메시지, "결제 처리에 실패했습니다. 해당하는 itemId가 존재하지 않습니다." 메시지 중 하나와 BAD_REQUEST status 반환

: parameter로 받은 Order의 count보다 item의 재고가 적은 경우 BAD_REQUEST status와 그 주문의 상품의 itemId, 즉 "{itemId}의 재고가 부족합니다." 메시지 반환

: 기타 예외 사항의 경우 INTERNAL_SERVER_ERROR status와 "주문 처리 중 오류가 발생했습니다." 메시지 반환

2. orderList()
: '/orders' 경로
: get 요청
: 전체 주문 리스트와 status 200 반환, 주문이 아예 없으면 404 status 반환
: 404 status 반환 시 로그에 "주문내역이 존재하지 않습니다."라는 메시지 출력

3. memberOrderList()  (삭제!!!)
: '/orders/user/{memberId}' 경로
: get 요청
: 해당 유저의 주문 리스트와 status 200을 반환, 해당 유저가 주문한 기록이 아예 없으면 404 status 반환
: 404 status 반환 시 로그에 "해당 memberId를 가지는 주문내역이 존재하지 않습니다."라는 메시지 출력

3. memberPurchaseList() (추가!!!)
: '/orders/buyer/{buyerId}' 경로
: get 요청
: 해당 buyerId를 가지는 주문 리스트와 status 200을 반환, 해당 buyer가 주문한 기록이 아예 없으면 404 status 반환
: 404 status 반환 시 로그에 "해당 buyerId를 가지는 구매내역이 존재하지 않습니다."라는 메시지 출력

4. memberSaleList() (추가!!!)
: '/orders/seller/{sellerId}' 경로
: get 요청
: 해당 sellerId를 가지는 주문 리스트와 status 200을 반환, 해당 seller가 주문한 기록이 아예 없으면 404 status 반환
: 404 status 반환 시 로그에 "해당 sellerId를 가지는 판매내역이 존재하지 않습니다."라는 메시지 출력


4. itemOrderList()
: '/orders/item/{itemId}' 경로
: get 요청
: 해당 상품의 주문 리스트와 status 200을 반환, 해당 상품 주문 기록이 아예 없으면 404 status 반환
: 404 status 반환 시 로그에 "해당 itemrId를 가지는 주문내역이 존재하지 않습니다."라는 메시지 출력

5. readOrder()
: '/orders/{orderId}'
: get 요청
: 해당 orderId를 가지는 주문이 있으면 해당 주문과 status 200 반환, 없으면 404 status 반환
: 404 status 반환 시 로그에 "해당 orderId를 가지는 주문내역이 존재하지 않습니다."라는 메시지 출력

6. deleteOrder()
: '/orders/{orderId}'
: delete 요청
: 해당 orderId를 가지는 주문을 orders DB에서 삭제, 삭제하는데에 성공하면 "주문이 성공적으로 삭제되었습니다." 메시지와 200 status 반환
: 주문한 상품의 재고나 품절상태 등 상품의 상태도 복구함
: 해당 orderId를 가지는 주문이 orders DB에 존재하지 않으면, 즉 IllegalStateException인 경우 BAD_REQUEST status와 "해당 주문 ID: {orderId}가 존재하지 않습니다." 메시지 반환
: 기타 예외의 경우 INTERNAL_SERVER_ERROR status와 "주문 삭제 중 오류가 발생했습니다." 메세지 반환
